{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","alt","src","this","props","id","name","email","Component","CardList","robots","map","users","key","SearchBox","type","placeholder","onChange","onSearchChange","username","App","event","setState","searchField","target","value","state","filteredRobots","filter","toLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAcmBA,E,iLAVX,OACI,yBAAKC,UAAU,uDACf,yBAAKC,IAAI,SAASC,IAAG,+BAA0BC,KAAKC,MAAMC,GAArC,mBACrB,4BAAKF,KAAKC,MAAME,MAChB,2BAAIH,KAAKC,MAAMG,Y,GANRC,aCgBAC,E,iLAZX,OACI,6BAEIN,KAAKC,MAAMM,OAAOC,KAAI,SAACC,GACnB,OAAO,kBAAC,EAAD,CAAMC,IAAKD,EAAMP,GAAIA,GAAIO,EAAMP,GAAIC,KAAMM,EAAMN,KAAMC,MAAOK,EAAML,gB,GAPtER,GCUJe,E,iLATX,OACI,yBAAKd,UAAU,OACX,2BAAOA,UAAU,mCAChBe,KAAK,SAASC,YAAY,gBAC1BC,SAAUd,KAAKC,MAAMc,sB,GANdV,aCFXE,EAAS,CAClB,CACEL,GAAI,EACJC,KAAM,gBACNa,SAAU,OACVZ,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,eACNa,SAAU,YACVZ,MAAO,qBAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,WACVZ,MAAO,sBAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,WACVZ,MAAO,6BAET,CACEF,GAAI,EACJC,KAAM,mBACNa,SAAU,SACVZ,MAAO,4BAET,CACEF,GAAI,EACJC,KAAM,uBACNa,SAAU,mBACVZ,MAAO,2BAET,CACEF,GAAI,EACJC,KAAM,kBACNa,SAAU,eACVZ,MAAO,0BAET,CACEF,GAAI,EACJC,KAAM,2BACNa,SAAU,gBACVZ,MAAO,wBAET,CACEF,GAAI,EACJC,KAAM,kBACNa,SAAU,WACVZ,MAAO,2BAET,CACEF,GAAI,GACJC,KAAM,qBACNa,SAAU,iBACVZ,MAAO,2BCzBMa,G,kBA3Bf,aAAc,IAAD,8BACT,+CAQJF,eAAiB,SAACG,GACd,EAAKC,SAAU,CAACC,YAAaF,EAAMG,OAAOC,SAR1C,EAAKC,MAAQ,CACThB,OAAQA,EACRa,YAAa,IAJR,E,sEAaJ,IAAD,OACEI,EAAiBxB,KAAKuB,MAAMhB,OAAOkB,QAAO,SAAAlB,GAC5C,OAAOA,EAAOJ,KAAKuB,cAAcC,SAAS,EAAKJ,MAAMH,YAAYM,kBAErE,OACI,yBAAK7B,UAAU,MACf,4CACA,kBAAC,EAAD,CAAWkB,eAAgBf,KAAKe,iBAChC,kBAAC,EAAD,CAAUR,OAAQiB,S,GAtBZnB,cCMEuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.20f682dd.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n    render(){\r\n        return (\r\n            <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robats' src={`https://robohash.org/${this.props.id}?size=200x200`}/>\r\n            <h2>{this.props.name}</h2>\r\n            <p>{this.props.email}</p>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n    export default Card;","import Card from \"./Card\";\r\nimport React from 'react';\r\n\r\nclass CardList extends Card{\r\n\r\n    render(){\r\n        return( \r\n            <div>\r\n            {\r\n                this.props.robots.map((users) => {\r\n                    return <Card key={users.id} id={users.id} name={users.name} email={users.email}/>;\r\n                })\r\n            }\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n    export default CardList;","import React, { Component } from 'react';\r\n\r\nclass SearchBox extends Component {\r\n    render(){\r\n        return(\r\n            <div className='pa2'>\r\n                <input className='pa3 ba b--green bg-lightest-blue'\r\n                 type=\"search\" placeholder=\"Search Robots\"\r\n                 onChange={this.props.onSearchChange} />\r\n            </div>\r\n            )\r\n        }\r\n    }\r\n    export default SearchBox;","export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import CardList from './CardList.js';\r\nimport React, { Component } from 'react';\r\nimport SearchBox from './SearchBox';\r\nimport {robots} from './Robots';\r\nimport './app.css';\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            robots: robots,\r\n            searchField: ''\r\n        }\r\n        \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState( {searchField: event.target.value});\r\n    }\r\n\r\n    render(){\r\n        const filteredRobots = this.state.robots.filter(robots => {\r\n            return robots.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n        })\r\n        return(\r\n            <div className=\"tc\">\r\n            <h1>Robo Friends</h1>\r\n            <SearchBox onSearchChange={this.onSearchChange} />\r\n            <CardList robots={filteredRobots}/>\r\n            </div>\r\n            );\r\n        }\r\n    }\r\n    \r\n    export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}